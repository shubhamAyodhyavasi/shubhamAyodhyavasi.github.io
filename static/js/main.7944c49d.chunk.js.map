{"version":3,"sources":["images/banner.png","components/header/Header.js","components/top-header/TopHeader.js","images/index.js","components/banner/Banner.js","components/cursor/Cursor.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavItem","children","label","link","className","href","Header","map","menu","key","TopHeader","imgPack","banner","Banner","src","alt","Cursor","handleMouseMove","e","clientX","clientY","setState","pos","setTimeout","posBack","state","document","addEventListener","this","removeEventListener","style","top","left","React","Component","HomePage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,qJCErCC,G,YAAU,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAC/B,OACI,wBAAIC,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAMF,GAAOD,EAAOD,MAgCzCK,EA5BA,WAeX,OACI,yBAAKF,UAAU,mCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,eAlBhB,CACV,CACID,KAAM,IACND,MAAO,SAEX,CACIC,KAAM,IACND,MAAO,WAEX,CACIC,KAAM,IACND,MAAO,YAQYK,KAAI,SAACC,EAAMC,GAAP,OAAe,kBAAC,EAAD,CAASA,IAAKA,EAAKN,KAAMK,EAAKL,KAAMD,MAAOM,EAAKN,gBCdnFQ,EAbG,WAEd,OACI,yBAAKN,UAAU,6BACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kB,OCDhBO,EAJC,CACZC,O,OAAAA,GCqBWC,EArBA,WAEX,OACI,yBAAKT,UAAU,0BACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YAAYU,IAAKH,EAAQC,OAAQG,IAAI,aAExD,yBAAKX,UAAU,YACX,yBAAKA,UAAU,OACX,wBAAIA,UAAU,aAAd,OACA,wBAAIA,UAAU,aAAd,UAAiC,wCAAjC,2BAAyE,+CAAzE,W,4BC2BbY,E,kDAvCX,aAAc,IAAD,8BACT,gBAYJC,gBAAkB,SAAAC,GAAM,IAEhBC,EAEAD,EAFAC,QACAC,EACAF,EADAE,QAEJ,EAAKC,SAAS,CAACC,IAAK,CAACH,EAASC,KAC9BG,YAAW,WACP,EAAKF,SAAS,CAACG,QAAS,CAACL,EAASC,OACnC,KAnBH,EAAKK,MAAQ,CACTH,IAAK,CAAC,EAAE,GACRE,QAAS,CAAC,EAAG,IAJR,E,gEAQTE,SAASC,iBAAiB,YAAaC,KAAKX,mB,2CAG5CS,SAASG,oBAAoB,YAAaD,KAAKX,mB,+BAa/C,OACI,oCACA,yBAAKa,MAAO,CACRC,IAAKH,KAAKH,MAAMH,IAAI,GACpBU,KAAMJ,KAAKH,MAAMH,IAAI,IACtBlB,UAAU,aACb,yBAAK0B,MAAO,CACRC,IAAKH,KAAKH,MAAMD,QAAQ,GACxBQ,KAAMJ,KAAKH,MAAMD,QAAQ,IAC1BpB,UAAU,iC,GAlCJ6B,IAAMC,WCUZC,EATE,WAEb,OACI,yBAAK/B,UAAU,UACX,kBAAC,EAAD,QCQGgC,MAXf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7944c49d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.6e1065a9.png\";","import React from 'react';\r\n\r\nconst NavItem = ({children, label, link}) => {\r\n    return(\r\n        <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href={link}>{label}{children}</a>\r\n        </li>\r\n    )\r\n}\r\nconst Header = () => {\r\n    const menus = [\r\n        {\r\n            link: \"#\",\r\n            label: \"About\"\r\n        },\r\n        {\r\n            link: \"#\",\r\n            label: \"Service\"\r\n        },\r\n        {\r\n            link: \"#\",\r\n            label: \"Contact\"\r\n        },\r\n    ]\r\n    return (\r\n        <div className=\"c-header bg-white border-bottom\">\r\n            <div className=\"container\">\r\n                <nav className=\"navbar\">\r\n                    <ul className=\"ml-auto nav\">\r\n                        {menus.map((menu, key) => <NavItem key={key} link={menu.link} label={menu.label} />)}\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst TopHeader = () => {\r\n\r\n    return (\r\n        <div className=\"c-top-header bg-light p-3\">\r\n            <div className=\"container\">\r\n                <div className=\"text-white\">\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopHeader;\r\n","import banner from './banner.png';\r\n\r\nconst imgPack = {\r\n    banner\r\n};\r\n\r\nexport default imgPack","import React from 'react';\r\nimport imgPack from '../../images';\r\n\r\nconst Banner = () => {\r\n\r\n    return (\r\n        <div className=\"c-banner bg-white py-5\">\r\n            <div className=\"container\">\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-md-5\">\r\n                        <img className=\"img-fluid\" src={imgPack.banner} alt=\"shubham\"/>\r\n                    </div>\r\n                    <div className=\"col-md-7\">\r\n                        <div className=\"p-5\">\r\n                            <h1 className=\"display-1\">Hi!</h1>\r\n                            <h3 className=\"display-4\">I am a <i>Front-end</i> Developer, graduate of <i>Computer Science</i>.</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React from 'react';\r\n\r\nclass Cursor extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            pos: [0,0],\r\n            posBack: [0, 0]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        document.addEventListener(\"mousemove\", this.handleMouseMove);\r\n    }\r\n    componentWillMount(){\r\n        document.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    }\r\n    handleMouseMove = e => {\r\n        const {\r\n            clientX,\r\n            clientY\r\n        } = e\r\n        this.setState({pos: [clientX, clientY]});\r\n        setTimeout(() => {\r\n            this.setState({posBack: [clientX, clientY]});\r\n        }, 50);\r\n    };\r\n    render(){\r\n        return (\r\n            <>\r\n            <div style={{\r\n                top: this.state.pos[1],\r\n                left: this.state.pos[0],\r\n            }} className=\"c-cursor\" />\r\n            <div style={{\r\n                top: this.state.posBack[1],\r\n                left: this.state.posBack[0],\r\n            }} className=\"c-cursor c-cursor--back\" />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cursor;\r\n","import React from 'react';\r\nimport { Banner } from '../components';\r\n\r\nconst HomePage = () => {\r\n\r\n    return(\r\n        <div className=\"p-home\">\r\n            <Banner />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage","import React from 'react';\nimport './App.scss';\nimport { HomePage } from './pages'\nimport { TopHeader, Header, Cursor } from './components';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cursor />\n      <TopHeader />\n      <Header />\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}